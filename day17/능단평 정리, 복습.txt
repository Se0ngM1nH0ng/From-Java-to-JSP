VO가 2개 이상 일 때 !

----------------------------------------------

[ 테스트 ]

0. 8 : 50 ~ 10 : 00 까지 능단평 Test01, Test02, Test03 제출
(요구 사항 맞는지 마지막으로 체크 하기 !)
1. 이클립스 x
2. 회의방식 x
3. 블로그 o
4. 60점 미만은 개인 프로젝트 .. ^^
5. 팀을 같이 하기 싫은 사람은 이름 적어서 내기..
6. 팀장 원하는 사람 알려주세요. 
(팀플관련 질문은 팀장에게만 받을 예정,, 질문이 많다 ? 팀장 해..)
7. 10 : 00 시작 ~ 11 : 50 까지
다풀면 ? 나가서 밥먹어..
8. 20문제정도

----------------------------------------------

주석 (많이 달기)

연산자 (우선순위체크)

제어문(한글코딩)

배열(3요소 체크) -> 컬렉션 프레임워크 (막쓰는게 아니라 체크)
(때로는 배열리스트보다 그냥 배열을 쓰는게 좋을 수도 있으니까)

함수(3요소 == 메서드 시그니쳐)

메서드

디버깅표 (→ 문제 출제)

----------------------------------------------

객체지향 프로그래밍 (OOP)의 특징 4가지

1) 추상화, 2) 캡슐화, 3) 상속, 4) 다형성

1) abstract 추상클래스
객체화 XXXXX
추상메서드 == 오버라이딩을 강제
ex) 포켓몬, 모양,..
(포켓몬은 없고, 포켓몬을 상속받은 피카츄, 파이리, .. 만 있다)
(모양은 없고, 모양을 상속받은 원, 네모, .. 만 있다)

2) private + getter, setter


3) extends 코드 재사용
오류의 파급효과가 줄어든다.

4) 메서드 재정의 == 오버라이딩을 했을때,
모양의 자식클래스인 원.그리기() 호출하면
자동으로 오버라이딩된 메서드 그리기()가 실행된다.
== 동적바인딩
-> 다형성이 실현 되었다 !
vs
함수명 중복정의 허용 == 오버로딩 (생성자에서 자주 발생 → 문제 출제)

----------------------------------------------

컬렉션 프레임워크

배열리스트, 집합, Map, ... 

이미 만들어진 프레임워크를 사용하는것이기 때문에
좋은 코드를 그냥 가지고 와서 쓰기 때문에
개발자의 실력이 상향 평준화 되는 장점.

예외 처리

예외 처리 왜 해 ?
=>
프로그램의 비정상적인 종료를 방지 (프로그램이 갑자기 종료되는것을 방지)

그리고, 이 예외 처리를 많이 사용한다는 것은
나 예외 종류 많이 안다는 말이 된다.

그러니까, 예외 만나면 스크린샷 찍고 포스팅 ~~~

--------------------------------------------------

스레드
(동일 DB에 동시접속하는 사용자들의 파악 등에 활용)
(웹에서는 사용자가 하나하나의 스레드인 개념으로 생각..)

파일 입출력
(웹에서 이미지 업로드 등에 활용)

---------------------------------------------------











