class Point {

멤버변수
int x
int y
String name

생성자
Point() {
this.name = "점"
this.x = 0
this.y = 0
}

Point(int x,int y) {
this.name = "점"
this.x = x
thix.y = y
}

메서드()

R:
점 목록 출력()

U:
점 이동()
점 합치기()	// 심화 ?
색 변경()

}	//	Point class

class ColorPoint extends Point {

멤버변수
String color

생성자

ColorPoint() {

this.color = "검정"
super(0,0)		vs	super();
}

ColorPoint(int x,int y) {

this.color = "검정"
super(x,y);
}

ColorPoint(String color,int x,int y) {

this.color = color;
super(x,y);
}

메서드()

부모의 클래스에 메서드를 사용하려고 할때
유사한 기능을 쓰려고 하는 경우면
오버라이딩 해서 이곳에 재정의 하자.
=> R : 색 (점) 목록 출력

C :
색 변경()
=> changeColor() {
위에 만들어 놓은 changeColor() 메서드를
오버라이딩 하기
}

}	//	ColorPoint class



main()

Point[] data = new Point[3];

===== 메뉴 =====
1. 점 생성
2. 점 목록 출력
3. 점 1개 출력
4. 점 이동
5. 색 변경
6. 점 합치기 (+)
7. 프로그램 종료
===============


Point 객체를 생성하면, 그 객체는
자손의 모든것을 다 사용할 수 있다 ..?
------------------------------------------

사용자로부터 입력받기
스캐너, 입력받은 값을 저장할 변수 설정
----------------------------------------------

1번을 누르면 
배열에 저장할 객체를 생성 해야 한다. :  C
문제에서 요구한 상황은
점(x,y)
검정(x,y)
분홍(x,y) 이라
Point 객체는 x값과 y값만 받는 객체
ColorPoint 객체는 x값과 y값만 받는 객체
ColorPoint 객체는 색입력, x값, y값 입력받는 객체

그러면, 필요한 기능이

나는 색을 입력하고 싶어 ! 하면
색입력모드로 들어가게 해서
색을 입력하면 색,x,y 3개 입력하게 하고
색을 입력하지 않으면 x,y 2개만 입력하게

그리고 색입력모드 아니면
그냥 단순하게 x,y만 입력해서 끝내기


위에서 색 입력은 nextline으로
좌표들은 nextint로
-------------------------------------------------------

색입력모드는
색입력 되어 있는 상태라면 
data[index] = new ColorPoint(색,x,y)
index++;

색입력 안했으면,
data[index] = new ColorPoint(x,y)
index++;

일반 모드는 바로
data[index] = new Point(x,y) 이렇게
index++;

색, x, y는 다 잘 입력받도록 순서 고려
----------------------------------------------------------

2번 누르면 점 목록 출력 (R) 메서드 호출
for문 돌려서
i는 인덱스번호
0부터 시작해서
i < 3까지 되게 
왜 ? 객체배열공간은 3이니까
근데, 상수로 표현 x
위에서 점이 저장될때마다 index 변수같은게
1씩 카운트 하게 해서
점 3개 저장하면 index = 3;
이 되게 만들고
i < index 로 표현하면
0 1 2 니까 배열 3개 ㅇㅋ
data[i].pointInfo();
------------------------------------------------------

3번 누르면 점 1개 출력 (R) (위의 메서드와 동일)
input = sc.nextint - 1
입력값이 1이면
배열의 인덱스는 1-1 해서 0

data[input].pointInfo();
---------------------------------------------------------

4번 누르면 점 이동 (U) 메서드 호출
몇번 점을 이동할건지 알아야함
for문 돌려서
i < index 로 해서
data[i].pointInfo(); 해서 현재 점 목록 출력 후

몇번 점 선택할건지 입력받기

선택한 점을 
data[입력값저장변수 - 1].printInfo();
해서 선택한 점의 현재 색(x,y)를 보여주고

x, y값 바꿔야 하니 
x값이랑 y값 입력 받고,
data[입력값저장변수 - 1].pointMove(ㅁ,ㅁ);
해서 좌표 변경 해준다.

잘 변경 됬는지 출력 해주면 ㅇㅋ
--------------------------------------------------------

5번 누르면 색 변경 (U) 메서드 호출
몇번 점의 색을 변경할건지 알아야함
for문 돌려서
i < index 로 해서
data[i].pointInfo(); 해서 현재 점 목록 출력 후

몇번 점 선택할건지 입력받기

선택한 점을 
data[입력값저장변수 - 1].printInfo();
해서 선택한 점의 현재 색(x,y)를 보여주고

색 변경 해야하니
변경할 색 입력받고
data[입력값저장변수 - 1].changeColor(색);
해서 색 변경 해준다.

잘 변경됬는지 출력 해주면 ㅇㅋ
--------------------------------------------------------

7. 6번 누르면 점 합치기 (U) 메서드 호출

--------------------------------------------------------

7번 누르면 프로그램 종료
7번 누르면 while 무한반복문 종료 조건 넣어주기
----------------------------------------------------------


