소스코드를 예쁘게 넣을 "서랍"
 == [ 패키지 ]
 : 일종의 단위

캐릭터 티모 패키지
 -> 티모 정보 소스코드
 -> Q() 액션 소스코드
 -> W() 액션 소스코드

소스코드 1장 == [ 클래스 ]
 : 자바언어의 "기본단위"
 : 기본단위인 클래스 파일은 ".java" 확장자명을 가짐
★ 대문자로 시작!

모든 프로그램 '동작'은 "함수(메서드)"가 진행함!
 함수(상자) == 기능
 x == 입력값,"input,인자",인수,매개변수,파라미터,argument,...
 y == 결과값,"output",반환값,return,...

public static void main(???){
공개범위 public / private
자바는 "공개정책"

static == "객체와 무관하게"
}


f(x) = 3x
f(input)

void(<- output자리) main(<-함수명)(input자리){}
[함수(메서드)]는 반드시 3가지를 갖고있어야함!!!!!
1. input
2. output
			void == 無(없음. 0이 아님에 유의!)
3. 기능
			함수명은 반드시 '기능을 유추할수 있게' 지어야함!
-------------------------------------------------------------
함수 3요소 - input, output, 기능
변수 3요소 - 공간, 주소, 이름

[변수]  - 정보를 저장하기 위한 상자
코드나 정보 등을 '저장'해두고, 기억해뒀다가 
나중에 다시 꺼내어 쓸수는 없을까 ?? 
데이터를 저장하는 공간 == "변수"
1. 공간
2. 주소 ex) "제주" oo읍 컨테이너 한테도 '주소' 는 있다
3. 주소를 뭐라고 부를지에 대한  "이름"

1. "공간" 에 대해 배워보자
자료형(data type)
정수 			int			4,0,-200
실수 			double		1.2, 0.0
문자			char			'A' 'z' '+'
문자열		String		"apple" "홍길동"
진위형		boolean		T / F

2.주소
JAVA는 JVM을 사용하는데, JVM은 공간을 관리해주는 친구임.
자동으로 공간을 지정해준다 !
주소는 공간을 할당하면 즉시 임의로 지정됨
--->> @ 해쉬값으로 나옴 

이런 이름으로 변수를 호출하기가(불러내기가) 어렵다.

3. 이름 (주소에 대한 이름이 필요하다.)
			== 변수명 이라고 불린다.
			변수 이름 규칙(식별자 규칙)
			1) 영어+숫자 조합
			2) _ 이건 허용
			3) 숫자로 시작은 x
			4) 소문자로 시작(대문자로 시작하는건  class니까)
			apple01				o
			apple_02				o
			01banana				x
			Banana				x
			apple banana		x
			※ 개발은 다같이 하는 것!
					이름, 변수명, 파일명, 함수명,...개인의 마음대로 정하시면 x
			이름만 봐도 얘가 뭐하는 애인지 확실히 유추할수 있게 지어주세요!


[연산자]
			
1) 대입 연산자 = 
변수공간 =  값;
"값을 변수공간에 저장해주세요" 라는 뜻
: 일반적으로 대입 연산자는 우선순위가 낮은편이다.


2) 산술 연산자
+ - * / %
/ INT 몫 연산자
					10/3 -> 3
					소수점뒤의 value를 버림하여
					3만 저장됨

value를 버림 == 데이터 손실

% MOD 나머지 연산자


"연산자 우선순위" ★★★★★
: 그냥 우리가 보통하고 싶은 순 으로 되어있다.
: 만약, "에러가 안났고"
			"로직에 문제가 없는거 같은데"
			"답이 이상하게 나올때"
			>>> 혹시 우선순위가 내생각과 다른가? 생각해볼때 

3) 증감 연산자
			a. 전위 증감연산자
					++data;
					--data;
					우선순위가 매우 높음
			b. 후위 증감연산자
					data++;
					data--;
					우선순위가 매우 낮음

1씩 증가 /감소 시켜주는 연산자


class06 패키지에 Test02 클래스
★ 디 버 깅 표 ★
x   y
------------------
10   
11
   11 => 11 11
   11
12      => 12 11

[ 문제 ]

int a=10;
int b=20;
int c=++a - b--;
int d=a-- * ++c;

a,b,c,d의 값은???

a   b      c       d
--------------------------------------
10   20   c=++a-b--   d=a--*++c
      대입,전위,산술,후위   대입,후위,산술,전위
      전위,산술,대입,후위   전위,산술,대입,후위
11   19   -9      
10        -8      -88



[ 비교 연산자 ]
> < >= <= == !=
코드에서 ! NOT(부정)
   -> 연산자 수행결과를 T/F(진위형,boolean)으로 반환

[ 논리 연산자 ]
 나이가 19살이상부터 45살미만까지만 가능하다.
 int age; // 나이라는 value를 저장할 변수 공간
 age>=19 그리고,~이면서,AND age<45
    -> &&

 가격이 1,000원이하 이거나 혹은 20,000원 초과된 상품인가요?
 int price; // 가격이라는 value를 저장할 변수 공간
 price<=1000 ~이거나,혹은,또는,OR price>20000
      -> ||

 ! NOT(부정)


[ 문제 ]
int a=10;
int b=20;
int c=++a - b--; 
int d=a-- * ++c; 

a,b,c,d의 값은???

a					b					c				d
-------------------------------------------
10					20				c=++a - b--
								대입,전위,산술,후위
								전위,산술,대입,후위

11					19					-9			d=a-- * ++c
												대입,후위,산술,전위
												전위,산술,대입,후위
										-8				-88
10


[비교 연산자]

> < >= <= == !=
코드에서 ! not(부정) 을 의미
			-> 연산자 수행결과를 T/F(진위형,boolean)으로 반환

[논리 연산자]
나이가 19살 이상부터 45살 미만 까지만 가능하다.
int age; // 나이라는 value를 저장할 변수 공간 

age>=19 그리고 

int price;
price<= 1000 || price > 20000

! not (부정)

[조건(삼항) 연산자]
조건 ? 참 : 거짓
ex) 10>5 ? 1 : 2
			-> 1 이 반환됨
ex) 10<5 ? 1 : 2

int a = 100;
int b = 200;
a,b 비교 후 더 큰수 출력

-----------------------
int c = 9;
c가 짝수 라면 'E' , 홀수 라면 '0' 을 출력
hint ) 정수를 2로 나누었을때 나머지가 0 이 되면 짝수 입니다

"변수"
"연산자"
"제어문"
1) 조건문
			: 분기점  (~라면)
			: 버튼식 수행	(ARS 1번을 누르세요,,,2번을 누르세요,,,)
			: 양자택일
			: 선택지
2)  반복문
			: 수행이 반복처리될때
			: N번, N회
			: A부터 B까지 , 범위
			: 계속, 무한하게 
-> 내가 공부하는 문법(기술)이 "언제 사용되는지" 를 함께 공부해야함!




























