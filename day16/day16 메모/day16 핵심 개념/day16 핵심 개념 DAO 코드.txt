package model;

import java.util.ArrayList;

// DAO의 CRUD(비즈니스 메서드,핵심 로직)는
// 어떤 추가 요청사항에도 절대!
// "메서드 시그니처"가 변하지않도록 코드를 작성해야함!!!!!

// "메서드 시그니처"가 변경되면 다른 파트에 영향을 줘버림...
// '기능' 변경은 ㄱㅊ

// 결론) "메서드 시그니처"는 설계단계에서 절대로 변경되면 안됨!!!!!!!!!!
public class DrinkDAO {

   private static int PK=1001;
   private ArrayList<DrinkVO> datas;
   public DrinkDAO() {
      datas=new ArrayList<DrinkVO>();
      datas.add(new DrinkVO(PK++,"콜라",1200,3));
      datas.add(new DrinkVO(PK++,"사이다",900,2));
      datas.add(new DrinkVO(PK++,"환타",1500,1));
   }

   public boolean insert(DrinkVO vo) {
      datas.add(new DrinkVO(PK++,vo.getName(),vo.getPrice(),vo.getCnt()));
      return true;
   }

   public ArrayList<DrinkVO> selectAll(DrinkVO vo) {
      return datas;
   }
   public DrinkVO selectOne(DrinkVO vo) { // PK
      for(DrinkVO data:datas) {
         if(data.getNum()==vo.getNum()) {
            return data;
         }
      }
      System.out.println(" 로그: selectOne(): 해당상품없음");
      return null;
   }

   public boolean update(DrinkVO vo) {
      for(DrinkVO data:datas) {
         if(data.getNum()==vo.getNum()) {
            if(data.getCnt()>=vo.getCnt()) {
               data.setCnt(data.getCnt()-vo.getCnt());
               return true;
            }
            System.out.println(" 로그: update(): 재고없음");
            return false;
         }
      }
      System.out.println(" 로그: update(): 해당상품없음");
      return false;
   }

   public boolean delete(DrinkVO vo) {
      for(int i=0;i<datas.size();i++) {
         if(datas.get(i).getNum()==vo.getNum()) {
            datas.remove(i);
            return true;
         }
      }
      System.out.println(" 로그: delete(): 해당상품없음");
      return false;
   }














}