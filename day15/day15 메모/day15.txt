[ ★★★ MVC ★★★ ]

(Model-View-Controller 을 이용한 설계 방식)

=> MVC 템플릿을 제공하는 Spring 프레임워크

JAVA, 파이썬, JSP, PHP, ...
여러가지 언어..
중요한건, 언어가 바뀌여도, 구조는 바뀌지 않는다.
(문법은 바뀌여도..)

M Model 모델
	데이터(DB)와 관련된 로직을 담당하는 파트.
	DB에서 데이터를 다루는 방법에 대한 코딩.
	==	SQL

	DB의 데이터를 JAVA 환경으로 가져올 수 있도록.
	JAVA 데이터를 DB 환경으로 가져올 수 있도록.
	DB <-----> JAVA
	==	JDBC, 'DAO'
	: CRUD "기능"을 구현하는 파트 (사용자에 제공할 서비스를 코딩)
	: CRUD 를 비즈니스 메서드, 핵심 로직 이라고도 부른다.

	JAVA에서 데이터를 "정의"하는 코딩.
	==	VO

V View 뷰
	사용자가 보는 화면에 대한 모든것을 담당하는 파트.
	사용자 편의성 (UI/UX) 고려.
	유효성 검사. (쉬운데 꼼꼼해야 한다)
	사용자와의 입출력을 담당하는 파트.

C Controller 컨트롤러
	V <-----> M 을 연결하는 파트. (총괄)
	★★★★★★★★★★★★★★★★★★★★★★★★★★★★
	MVC 패턴의 핵심은,
	M과 V가 절대 서로 딱 !
	붙어 있지 않게 !
	무조건 ! 분리되어 있어야 한다.
	사용자가 DB에 직접 접근을 하는일은 XXX !	
	★★★★★★★★★★★★★★★★★★★★★★★★★★★★

예시) 학생부 프로그램

사용자 (클라이언트)가 프로그램을 ON 

V가 "어떤 메뉴를 이용할래 ?" 라고 물어본다.

사용자가 "학생목록출력" 을 입력하면,

V가 C한테 "C야, 사용자가 학생목록출력 이용 할거래 ~"

C는 M한테 가서, "M아, 학생목록 데이터 좀 줄래 ?"

M은 DB에 가서 SELECT * FROM STUDENT; 을 해서
학생목록 데이터를 받아온다.

M이 C한테 받아온 학생목록 데이터를 다시 준다.

C는 V한테 가서, "V야, 여기 너가 찾던 학생목록 데이터 ~"

V는 사용자(Console) 에게 학생목록 데이터를 출력 해준다.

---------------------------------------------

예시 2) 웹툰

사용자가 웹툰 어플을 ON.

-> 할일 : '웹툰 목록 데이터를 불러와서 화면에 출력'

C가 M한테 가서 "웹툰 목록 데이터 좀 줘 ~"

M이 DB에서 웹툰 목록 데이터를 받아온다.

M은 받은 데이터를 "C"한테 다시 준다.

"C"는 M에게 받은 데이터를 V에게 전달한다.

V는 사용자 (화면) 에게 C로부터 받아온 데이터를 출력 한다. 

정리 => M이 V로 바로 가는게 아니라, 중간에
	C를 통해서 전달하게 되는 흐름.

---------------------------------------------

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

MVC의 장점

1. 유지보수 용이.
2. 모듈화를 강제해서 개발의 편의성을 도모.
예시) 레고블록이 작을수록 다양한 output (모양) 을 만들어 낸다.

3. ★ 프로젝트 코드가 '낮은 결합도' 를 가진다. => 유지보수 용이
결합도 ? : 코드 의존도가 존재.

4. ★ 프로젝트 코드가 '높은 응집도' 를 가진다. => 유지보수 용이
응집도 ? : 관련있는 코드들끼리 하나의 페이지에 작성 하는 것.
예시)
int 학생수 = 50;

for(학생수)
for(학생수)
while(학생수가 될때까지)
for(학생수)

int 학생수 = 50;

을 하지 않으면, 학생수가 변경될때마다 모든 부분을 다 수정 해야 한다.

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

View -> Model -> Controller 순으로 만드셨다.

왜? Model에서 VO랑 DAO랑 내가 직접 만든게 아니라도
Controller에서는 흐름만 알고있으면 구현이 가능하거든,,
근데 흐름을 이해하는게 어렵다..

클라이언트(사용자) 를 main() 에서 구현 해야 하는 것이다.

-------------------------------------------------

//	CRUD(비즈니스 메서드, 핵심 로직)
//	:	일반적으로 output이 boolean 타입 !!!!! ★★★★★
//	DAO 에서는 로그들만 sysout이 가능 -> 나중에 로그들은 주석으로 제거.
//	나머지 sysout의 기능은 View에 구현.
//	Controller 에서도 sysout은 하지 않는다. View에 구현.

----------------------------------------------------------

키포인트 : 

★ 01. sysout()은 오직 VIEW 에서만 사용 가능 하다.

★ 02. CRUD (DAO 메서드)는 output이 boolean !

★ 03. CRUD (DAO 메서드)의 이름은 고정 이다.
1) insert
2) selectAll (getAll)
3) selectOne (getOne)
4) update
5) delete

만약, 더 기능을 사용 해야 한다 하면, 메서드 "오버로딩"을 통해 해결 한다.
