[ DB ]

DB (데이터, 정보, 자료)를 다루는 시스템.
=> DBMS :  MySQL, 오라클, ..

실무에서 DBMS가 변경되는 일이 매우 자주 발생한다.

그래서, 우리는 취업할 때 무엇을 어필 ???

=>


★ 중복 데이터가 없는 DB ★
-> 서버 비용이 절감.
-> 영업 이익 증가.

-----------------------------------------------------------------------

학생 테이블

>> PK(고유키)로 각 행을 식별.
PK(학번)	이름	점수	동아리
1001	홍길동	80	농구부	>> 데이터는 행(튜플, 레코드, row) 단위로 저장 된다.
1002	임꺽정	75	미술부
.
.
.

>> 열(column, 속성, 필드, attribute) : 멤버변수, 인스턴스 변수 (VO)

이러한, 거대한 정보가 저장되어있는 집합 == 테이블

음악
11	aa	bb
12	cc	dd
.
.

회원
1001	A	11 << 테이블간의 '관계'가 형성 되었다 !
1002	B	12 << 이러한 테이블간의 관계를 ERD 라고 한다.
			(entity relationship diagram)
			(★ 설계시 ERD를 잘 그리는것이 매우 중요 !)
			(설계서에 꼭 들어가야 한다 !)
.
.

-----------------------------------------------------------------------

DB에서 활용하는 언어 SQL (쿼리문)

인터프리터 언어 (채팅형 언어)

인터프리터 언어의 뜻 :
한줄씩 코딩하고 실행할 수 있다.

-----------------------------------------------------------------------

-- 주석
; 마침표

SQL은 대소문자 구분을 하지 않지만, 가독성을 위해 모든 명령어를 대문자로 작성 한다.

-----------------------------------------------------------------------

CREATE >>

INSERT INTO  테이블명(VO,VO,VO,..) VALUES(VO,VO,VO,..); (삽입)
INSERT INTO STUDENT (NAME,SCORE,POS,LV) VALUES('오리아나',24,'미드',8);

=> Create

DROP >> 테이블 없애기.

-----------------------------------------------------------------------

SELECT >>

SELECT * FROM STUDENT;
(어디에서부터 어디까지만 보고 싶어 ~)

SELECT NAME, POS FROM STUDENT;
(NAME 에서부터 POS 까지만 보고 싶어.)

=> Read

-----------------------------------------------------------------------

UPDATE >>

UPDATE STUDENT SET SCORE = 1, LV = 4 WHERE NUM = 12;
Query OK, 1 row affected (0.02 sec)
Rows matched: 1  Changed: 1  Warnings: 0

=> Update

-----------------------------------------------------------------------

DELETE >>

DELETE FROM STUDENT WHERE NUM = 12;

=> Delete

(Delete는 FROM을 넣어줘야 한다)

-----------------------------------------------------------------------

CREATE TABLE 이름 => 테이블 생성

DROP TABLE 이름 => 테이블을 없애고 싶을때

TABLE 생성시
TABLE명은 중복될수 없다!

필드명(VO) 자료형(String이 아닌 VARCHAR를 사용 공간을 정해 줘야 한다) 제약조건

NUM INT PRIMARY KEY AUTO_INCREMENT (PK는 반드시 존재 해야 한다)
AUTO_INCREMENT 자동으로 값을 지정해줘라.

NOT NULL 비어 있는값을 받지않겠다.

DEFAULT 비어 있을때 값을 설정해주겠다.

ORDER 정렬
DESC 내림차순
ASC 오름차순

DELETE시 FROM 필요 하다.

이름을 포함한 경우를 찾고싶을때 WHERE NAME LIKE '%아%'

SELECT ( * ) 은 실무때 잘 사용하지 않음. 사용시 열( ex) a,b )을 명시해주는것이 더 좋다.

INSERT -> 추가

UPDATE ( UPDATE STUDENT SET SCORE = 1,LV = 4 WHERE NUM = 12; )

COUNT(LV) [AS LV_CNT] 집계시 ->[ ] 부분은 좀더 직관적으로 보일수있도록 이름을 정해줄 수 있다.
SUM(LV) [AS LV_SUM] 합산시
AVG(LV) [AS LV_AVG] 평균

일반적인 조건절 : WHERE

그룹바이(GROUP BY) 조건절 : HAVING

Query OK : 문법이 맞다는 의미.

0 row : 적용된 데이터는 없음
1 row : 적용된 데이터는 1개

SELECT

ORDER BY 칼럼명 [ASC/DESC]

-----------------------------------------------------------------------

[ 데이터 그룹화 ]

열에서 값이 같은것끼리 묶어서 관리
SELECT POS FROM STUDENT GROUP BY POS;

-----------------------------------------------------------------------

DB가 최적화가 안되어 있다는 말 == 중복 데이터가 발생할 여지가 있다.

-- 실무에서 WHERE절 (조건절) 뒤에 부분을 PK가 아닌것을 작성하는 경우는 굉장히 없는 케이스 이다.

예시)

[ 학생 테이블 ] >> 자식 테이블

학생명	동아리 (FK, 외래키, 외부키 - 반드시 관계를 갖게되는 테이블의 PK여야만 한다 !)
학생1	13
학생2	14
학생3	12
학생4	13
학생5	14

[ 동아리 테이블 ] >> 부모 테이블
PK	동아리명
11	회화부
12	농구부
13	미술부
14	미술작품감상부

이런식으로 테이블을 2개를 만들어서, INT값인 PK로 값을 교체한다.

※ 데이터 자체는 몇개 없어도, 테이블은 많이 존재할 수 있다 !
즉, 잘게 나눠서 관리하는것이 데이터 중복을 더 잘 예방할 수 있어서 용이 !

-- 이렇게 관계를 가지는 테이블끼리는 우선순위가 존재한다..
-- 먼저 만들어야 하는 테이블을 편의상 부모 테이블 이라고 부른다.

-- 오타가 아니라면,
-- 제약조건에 걸리지 않았는지 확인 필수 !

-- 만약에, 뭔가를 제거할때 FK로 사용하던 다른 테이블의 데이터도 함께 제거 하고 싶으면 ?
-- [ ON DELETE CASCADE ]
-- 농구부 제거시, 아무무도 함께 제거 된다.
즉, 부모 테이블을 제거시, 자식 테이블도 제거 되는 느낌 ..?

-----------------------------------------------------------------------






